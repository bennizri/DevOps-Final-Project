- name: Create a nginx server with site
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - group_vars/env
  vars:
      ansible_python_interpreter: /usr/bin/python3

  tasks:
  - name: create VPC
    ec2_vpc_net:
      name: "{{ vpc_name }}"
      cidr_block: "{{ network }}"
      region: "{{ aws_region }}"
      state: present
      dns_hostnames: yes
      dns_support: yes
      multi_ok: no
      tags:
        Name: "{{ vpc_name }}"
    register: vpc

  - name: associate subnet to the VPC
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      cidr: "{{ subnet_cidr }}"
      map_public: yes
      az: "{{ subnet }}"
      resource_tags:
        Name: "{{ vpc_name }}"
      wait: yes
    register: subnet  

  - name: create IGW
    ec2_vpc_igw:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      tags:
        Name: "{{ vpc_name }}_igw"
    register: igw  

  - name: Route table for public Subnet
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      subnets:
        - "{{ subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id  }}"
      tags:
        Name: "{{ vpc_name }}_public_rt"    
  
  - name: Create security group
    ec2_group:
      name: "{{ vpc_name }} VPC SG"
      description: "{{ vpc_name }} VPC SG"
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ aws_region }}"
      state: present
      rules:
        - proto: tcp
          ports:
          - 80
          - 22
          cidr_ip: 0.0.0.0/0
    register: sg

  - name: Create server
    amazon.aws.ec2_instance:
      image_id: "{{ aws_centos_ami }}"
      wait: yes
      instance_type: "{{ Server_type }}"
      region: "{{ aws_region }}"
      security_group: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ subnet.subnet.id }}"
      key_name: "{{ keypair }}"
      volumes:
        - device_name: /dev/sda1
          ebs:
            volume_type: gp3
            volume_size: "{{ server_volume_size }}"
            delete_on_termination: true
      tags:
        Name: "{{ server_name }}"
        Environment: "{{ env }}"
      exact_count: 1
      wait_timeout: 300
      network:
        assign_public_ip: yes
      state: running
    register: server_ec2  

  - name: get ip of instance
    amazon.aws.ec2_instance_info:
      filters:
        "tag:Name": "{{ server_name }}"
        instance-state-name: ["running"]
    register: ec2_data

  - debug: var=ec2_data.instances[0].public_ip_address  

  - name: Add server public IP to application host group
    add_host: hostname={{ ec2_data.instances[0].public_ip_address }} groups=app

  - name: Wait for SSH to start using external IP
    wait_for:
      host: "{{ ec2_data.instances[0].public_ip_address }}"
      port: 22
      timeout: 300


#################################################################
- name: Setup web server
  hosts: app
  user: centos
  become: True
  gather_facts: False
  vars_files:
    - group_vars/env
    - group_vars/docker.env
  tasks: 
    - name: install base packages  
      yum: 
        name: 
          - epel-release
        state: present  

    - name: install base packages
      yum:
        name:
          - git
          - nginx
          - python-pip
          - yum-utils
        state: present
#
    - name: Add repository
      shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: Install Docker
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
        state: present

    - name: restart Docker service
      service:
        name: docker
        state: restarted
        enabled: yes

    - name: copy file with owner and permissions
      copy:
        src: ~/.ssh/id_rsa
        dest: ~/.ssh/id_rsa
        mode: '0600'

    - name: Clone my app repo
      git:
        repo: "{{ repo }}"
        dest: /opt/app
        version: main
        key_file: ~/.ssh/id_rsa
        accept_hostkey: yes
        force: yes

    - debug: var=docker_user 

    - name: build docker image and push to DockerHub
      shell: "{{ item }}"
      args:
        chdir: /opt/app/frontend
      with_items:
      - docker login -u {{ docker_user }} -p {{ docker_token }}
      - docker build . --tag {{ docker_user }}/myapp:latest
      - docker push {{ docker_user }}/myapp:latest
      
    
    - name: start docker app
      shell: docker-compose up -d
      args:
        chdir: /opt/app/frontend
        
    - name: get ip from server
      shell: curl ident.me
      register: ip_address
      
    - debug:
        msg: "{{ ip_address.stdout }}"
  